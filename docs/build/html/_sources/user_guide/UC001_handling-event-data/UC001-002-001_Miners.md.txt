# Майнеры

> Майнеры - алгоритмы, которые помогают преобразовать лог в модель процесса в виде графа. Задачей алгоритмов этой группы является формирование модели процесса, а именно размещение этапов в вершины графа и установление видов отношений между ними.

Любой журнал событий можно отобразить в виде ориентированного, взвешенного графа. Для начала вспомним базовые понятия из теории графов.
Граф – это топологическая модель (структура данных), которая состоит из множества вершин и множества соединяющих их ребер.
Ориентированный граф – это граф, рёбрам которого присвоено направление.
Взвешенный граф – это граф, в котором каждому ребру назначено некоторое числовое значение (вес ребра).
Вершина – это точка графа, а ребро – это неупорядоченная пара двух связанных вершин. Петля – это ребро, которое замыкается на одной вершине.
Путь или маршрут – это последовательность смежных ребер, обычно путь задается перечислением вершин, по которым он пролегает. Длина пути – количество ребер в пути.
Компоненты связности графа – это множество таких вершин графа, что между любыми двумя вершинами существует маршрут.
С точки зрения процессной аналитики, каждый этап процесса «А» является вершиной графа, в свою очередь последовательность этапов «закодирована» ребрами. Весом ребра может стать любой атрибут журнала лога – например, длительность выполнения операции, количество экземпляров процесса, в которых такое ребро существовало, простой или стоимость каждой части процесса.


## Типы майнеров

1. `SimpleMiner` рисует все ребра, найденные в логе (без какой-либо фильтрации).
2. `CasualMiner` рисует только прямые связи.
3. `HeuMiner` удаляет наиболее редкие связи в зависимости от задаваемого порога (threshold).
4. `AlphaMiner` рисует граф в виде сети Петри с учетом прямых, параллельных и независимых связей между активностями.
5. `AlphaPlusMiner` является улучшением `AlphaMiner`, который исует граф в виде сетей Петри с учетом связей.
6. `InductiveMiner` отображает переходы графа  через 4 типа переходов.
7. `ClusterMiner` группирует этапы на основе их последовательной совместной встречаемости в логе процесса. Этапы объединяются в кластеры на основании ожидаемой частоты перехода между ними.
8. `DFSMiner` производит поиск наиболее частых путей процесса, ориентируясь на количественную метрику появления перехода в логе. Частые переходы отображаются на графе, а редкие - объединяются в группу и могут формировать "скрытые разветвленные цепочки", суммарно представляющие интерес.