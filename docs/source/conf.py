# -- Project information -----------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#project-information
import json
with open("config_local.json", "r") as f:
    config: dict = json.load(f)

project = 'Sberpm'
copyright = "2024, Team Sber Process Mining"
author = 'Team sberpm'
release = "3.4.0"
version = "3.4.0"





# -- General configuration ---------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#general-configuration

#adding a path to create an api, otherwise the modules are not visible
import os
import sys

sys.path.insert(0, os.path.abspath("../../"))

#import for gallery (jypyter examples)


# from sphinx_gallery.notebook import add_code_cell, add_markdown_cell
from sphinx_gallery.sorting import FileNameSortKey

try:
    # Configure plotly to integrate its output into the HTML pages generated by
    # sphinx-gallery.
    import plotly.io as pio

    pio.renderers.default = "sphinx_gallery"
except ImportError:
    # Make it possible to render the doc when not running the examples
    # that need plotly.
    pass


# simply add the extension to your list of extensions
extensions = [
    "sphinx.ext.autodoc", #api 
    # "autodoc2", 
    "sphinx.ext.autosummary", #api 
    # "numpydoc", #api 
    'myst_parser', # work with md
    'sphinx.ext.duration',
    'sphinx_togglebutton',
    "sphinx_copybutton",
    "sphinx_tabs.tabs",
    'sphinx_simplepdf', #  extension for  build pdf
    "rst2pdf.pdfbuilder",# extension for build  pdf
    "sphinx_design" , # adвitional function for md
    "matplotlib.sphinxext.plot_directive",
    # "sphinx_gallery.gen_gallery", #jupyter
    'nbsphinx',#jupyter
    'sphinx.ext.doctest',  #need to understand 
    'sphinx.ext.intersphinx', #need to understand 
    'sphinx.ext.ifconfig', #need to understand 
    'sphinx.ext.inheritance_diagram', #need to understand 
    'sphinx.ext.todo', #need to understand 
    'sphinx.ext.viewcode', #need to understand 
]

source_suffix = ['.rst', '.md'] 

templates_path = ['_templates']

# generate autosummary even if no references
autosummary_generate = True

# Not build files
exclude_patterns = [
    'developer_notes',
    'tm_guide',
]

exclude_patterns.extend(config.get("exclude_patterns", []))

html_show_sphinx = False
language = 'ru'
locale_dirs = ['_locale/']
gettext_compact = False

# -- Options for HTML output -------------------------------------------------
# https://www.sphinx-doc.org/en/master/usage/configuration.html#options-for-html-output

# Specify how to identify the prompt when copying code snippets
copybutton_prompt_text = r">>> |\.\.\. "
copybutton_prompt_is_regexp = True
copybutton_exclude = "style"

#HTML 

html_theme = "pydata_sphinx_theme"
html_static_path = ['_static',]
html_css_files = ['css/custom.css',]
# html_logo = "_static/logo.svg"
# html_favicon = "_static/favicon_blue.png"
html_theme_options = {
    "announcement": config.get("announcement"),
    "navigation_with_keys": True,
    "show_nav_level": 4,
    "collapse_navigation": True,

    "logo": {
        "text": "Process mining от Сбера",
        # "image_dark": "_static/favicon.png",
        "alt_text": "Process mining от Сбера",
    },
    "header_links_before_dropdown": 2,
    "icon_links": [
        {
            "name": "SberPM Python Library",
            "url": config.get("pm_python_library_url"),
            "icon": "fa-brands fa-python",
        }

    ],
    "external_links": [
        {
            "url": "https://developers.sber.ru/portal/products/sber-process-mining?box=true",
            "name": "Process Mining в каталоге продуктов Sber",
        }
    ],

    "show_toc_level": 3,
    "footer_start": ["copyright"],
    "footer_end": ["last-updated.html"],
    "use_edit_page_button": config.get("use_edit_page_button"),
}

html_show_sourcelink = False
html_last_updated_fmt = ' %d %b %Y'

myst_enable_extensions = [
    "colon_fence",
    "linkify",
    "substitution",
    "attrs_inline",
    "html_image",
    "dollarmath",
    "amsmath",
    "tasklist",
    "deflist",
    "attrs_block",
    "colon_fence"
]

myst_dmath_double_inline = True

myst_heading_anchors = 2

togglebutton_hint = "Раскрыть"

# sphinx_gallery_conf 
sphinx_gallery_conf = {
    "doc_module": "sberpm",
    "backreferences_dir": os.path.join("modules", "generated"),
    "show_memory": False,
    "examples_dirs": ["../../examples"],
    "gallery_dirs": ["auto_examples"],
    "within_subsection_order": FileNameSortKey,
    #avoid generating too many cross links
    "inspect_global_variables": False,
    "remove_config_comments": True,
    "plot_gallery": "True",
    "recommender": {"enable": True, "n_examples": 5, "min_df": 12},
    "reset_modules": ("matplotlib", "seaborn"),
}

autodoc2_packages = [
    "../../sberpm/baza",
]

# -- Options for PDF output --------------------------------------------------
# Grouping the document tree into PDF files. List of tuples
# (source start file, target name, title, author, options).
#
# If there is more than one author, separate them with \\.
# For example: r'Guido van Rossum\\Fred L. Drake, Jr., editor'
#
# The options element is a dictionary that lets you override
# this config per-document. For example:
#
# ('index', 'MyProject', 'My Project', 'Author Name', {'pdf_compressed': True})
#
# would mean that specific document would be compressed
# regardless of the global 'pdf_compressed' setting.
pdf_documents = [
    ('index', 'dqc',),
]
# A comma-separated list of custom stylesheets. Example:
# pdf_stylesheets = ['sphinx', 'a4']
# pdf_stylesheets = ['simple.style']
pdf_stylesheets=['sphinx','simple']
# A list of folders to search for stylesheets. Example:
pdf_style_path = ['.', 'source/_styles/']
# Create a compressed PDF
# Use True/False or 1/0
# Example: compressed=True
# pdf_compressed = False
# A colon-separated list of folders to search for fonts. Example:
# pdf_font_path = ['/usr/share/fonts', '/usr/share/texmf-dist/fonts/']
# Language to be used for hyphenation support
pdf_language = "ru_RU"
# Mode for literal blocks wider than the frame. Can be
# overflow, shrink or truncate
pdf_fit_mode = "shrink"
# Section level that forces a break page.
# For example: 1 means top-level sections start in a new page
# 0 means disabled
pdf_break_level = 3

# When a section starts in a new page, force it to be 'even', 'odd',
# or just use 'any'
pdf_breakside = 'any'
# Insert footnotes where they are defined instead of
# at the end.
# pdf_inline_footnotes = True
# verbosity level. 0 1 or 2
# pdf_verbosity = 0
# If false, no index is generated.
pdf_use_index = True
# If false, no modindex is generated.
# pdf_use_modindex = True
# If false, no coverpage is generated.
# pdf_use_coverpage = True
# Name of the cover page template to use
pdf_cover_template = 'coverpage.tmpl'
# Documents to append as an appendix to all manuals.
# pdf_appendices = []
# Enable experimental feature to split table cells. Use it
# if you get "DelayedTable too big" errors
# pdf_splittables = False
# Set the default DPI for images
pdf_default_dpi = 150
# Enable rst2pdf extension modules
# pdf_extensions = []
# Page template name for "regular" pages
# pdf_page_template = 'cutePage'
# Show Table Of Contents at the beginning?
pdf_use_toc = True
# How many levels deep should the table of contents be?
pdf_toc_depth = 999
# Add section number to section references
pdf_use_numbered_links = True



# Background images fitting mode
pdf_fit_background_mode = 'scale'
# Repeat table header on tables that cross a page boundary?
pdf_repeat_table_rows = True
# Enable smart quotes (1, 2 or 3) or disable by setting to 0
pdf_smartquotes = 0

